import { ContextType, ConversationType, ConversationStageType } from '../../types';
import { ErrorLocales } from '../../config';
import {
  escapeChars, isNumeric, getPercentageOfNumber, toFixedNumber, replaceComma,
} from '../../utils';
import {
  BANK_PERCENT, ATM_COMISSION, APPROXIMATE_FROZE_PERCENT, BROKER_PERCENT,
} from '../../config/contstants';

const useWithdrawalFromThb = async (
  conversation: ConversationType,
  ctx: ContextType,
  stages: ConversationStageType[],
  chatId: number,
  unionPayTargetRate: number,
  hasActualRate: boolean,
): Promise<void> => {
  let current = stages[0];
  let exchangeRate = 0;
  let needTHB = 0;
  let lastUserMessageId = 0;

  while (stages.some((stage) => stage.stage === current.stage)) {
    await ctx.replyWithMarkdown(current.message, { reply_markup: current.reply_markup });

    const context = await conversation.wait();
    const message = replaceComma(context?.update?.message?.text) as unknown as number;
    if (message) {
      lastUserMessageId = context?.update?.message?.message_id;
    }

    if (message && !isNumeric(message as unknown as string) && !context?.update?.callback_query?.data) {
      context.deleteMessage();
      await ctx.replyWithMarkdown(escapeChars(ErrorLocales.NOT_NUMBER));
      continue;
    }

    // complaint back btn
    if (/back/.test(context?.update?.callback_query?.data)) {
      ctx.api.deleteMessage(chatId, lastUserMessageId);
      context.deleteMessage();

      current = stages[current.stage - 2];
      continue;
    }

    if (current.stage === 1) {
      needTHB = message;
    } else if (current.stage === 2) {
      exchangeRate = message;
    } else if (current.stage === 3) {
      let isInludesATMCommission = false;
      if (/include_ATM_commission/.test(context?.update?.callback_query?.data)) {
        isInludesATMCommission = true;
      }

      if (/not_include_ATM_comission/.test(context?.update?.callback_query?.data)) {
        isInludesATMCommission = false;
      }

      const THB = Number(needTHB) + Number(isInludesATMCommission ? ATM_COMISSION : 0); // —Å—É–º–º–∞ –≤ THB
      const withoutBankFee = toFixedNumber(unionPayTargetRate * THB, 2); // –±–µ–∑ –∫–æ–º–∏—Å—Å–∏–∏ –±–∞–Ω–∫–∞ –≤ CNY

      const withFee = toFixedNumber(withoutBankFee + getPercentageOfNumber(withoutBankFee, BANK_PERCENT), 2); // —Å –∫–æ–º–∏—Å—Å–∏–µ–π –±–∞–Ω–∫–∞ –≤ CNY

      const exchangeRateWithBrokerFee = toFixedNumber(Number(exchangeRate) + getPercentageOfNumber(exchangeRate, BROKER_PERCENT), 4);

      const needRub = toFixedNumber(withFee * exchangeRateWithBrokerFee, 2); // –Ω—É–∂–Ω–æ —Ä—É–±–ª–µ–π
      const FINALRATE = toFixedNumber((withFee * exchangeRateWithBrokerFee) / needTHB, 4); // —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –∫—É—Ä—Å RUB -> THB

      const escapedText = escapeChars(`
      ${!hasActualRate ? '‚ùóÔ∏è *–ö—É—Ä—Å –Ω–∞ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å –µ—â—ë –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, —Ä–∞—Å—á—ë—Ç—ã –ø–æ –∫—É—Ä—Å—É –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –¥–Ω—è* ‚ùóÔ∏è\n' : ''}
      \n–ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞: *${withFee} CNY* üá®üá≥ –∏–ª–∏ *${needRub} RUB* üá∑üá∫
      \n–ö—É—Ä—Å —Å–Ω—è—Ç–∏—è *RUB -> THB*: *${FINALRATE}*
      \nP.S. –ù—É–∂–Ω–æ —É—á–∏—Ç—ã–≤–∞—Ç—å, —á—Ç–æ –±–∞–Ω–∫ –∑–∞–º–æ—Ä–æ–∑–∏—Ç CNY üá®üá≥ –Ω–∞ *‚âà${APPROXIMATE_FROZE_PERCENT}%* –±–æ–ª—å—à–µ –æ—Ç —Å—É–º–º—ã –æ–ø–µ—Ä–∞—Ü–∏–∏. –ï—Å–ª–∏ –í–∞–º –Ω—É–∂–Ω–æ —Å–Ω—è—Ç—å *${withFee} CNY* üá®üá≥, —Ç–æ –Ω–∞ –∫–∞—Ä—Ç–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å *‚âà${toFixedNumber(withFee + getPercentageOfNumber(withFee, APPROXIMATE_FROZE_PERCENT), 2)} CNY* üá®üá≥
      `);

      await ctx.replyWithMarkdown(escapedText);
      // await ctx.replyWithMarkdown(escapedText, { reply_markup: KeyboardMarkup.moreInfo });

      // const nextContext = await conversation.wait();

      // if (/more_info/.test(nextContext?.update?.callback_query?.data)) {
      //   const escapedMore = escapeChars('');

      //   await ctx.replyWithMarkdown(escapedMore);
      // }

      return;
    }

    current = stages[current.stage];
  }
};

export { useWithdrawalFromThb };
